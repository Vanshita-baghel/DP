PROBLEM STATEMENT:
Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

SOLUTION:

                                                                                    (Concept)    FORMULA: n- lcs(str)
class Solution {
    public int minInsertions(String s) {
        return s.length()- longestPalindromeSubseq(s);
    }
    public int longestPalindromeSubseq(String s) {
        String t= reverse(s);
        return longestCommonSubsequence(s,t);
    }
    public String reverse(String s){
        StringBuilder rev= new StringBuilder();
        int i= s.length()-1;
        while(i>=0){
            rev.append(s.charAt(i));
            i--;
        }
        return rev.toString();
    }
    public int longestCommonSubsequence(String s, String t) {
        int n= s.length();
        int m= t.length();

        int[] prev= new int[m+1];
        int[] cur= new int[m+1];
        
        for(int j=0; j<=m; j++){
            prev[j]= 0;
        }

        for(int i= 1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(s.charAt(i-1) == t.charAt(j-1))  cur[j]= 1+ prev[j-1];

                else cur[j]= Math.max(prev[j], cur[j-1]);
            }
            prev= cur.clone();
        }

        return prev[m];
    }
}
