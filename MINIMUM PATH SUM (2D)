PROBLEM STATEMENT:
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

SOLUTION:

                                                                                            APPROACH 1: RECURSION
                                                                                            TIME COMPLEXITY: O(2^(M+N))
                                                                                            SPACE COMPLEXITY: O(M+N) for stack space
class Solution {
    public int minPathSum(int[][] grid) {
        int m= grid.length;
        int n= grid[0].length;

        return f(0,0, grid, m, n);
    }
    public int f(int i, int j, int[][] grid, int m, int n){
        if(i>m-1 || j> n-1) return -1;
        if(i==m-1 && j== n-1)   return grid[m-1][n-1];

        int down= f(i+1, j, grid, m,n);
        int right= f(i, j+1, grid, m, n);

        if(down == -1)  return grid[i][j]+ right;
        else if(right== -1) return grid[i][j]+ down;
        else return Math.min(grid[i][j]+ right, grid[i][j]+ down);
    }
}


                                                                                            APPROACH 2: MEMOIZATION
                                                                                            TIME COMPLEXITY: O(M*N)
                                                                                            SPACE COMPLEXITY:  O(m*n) for dp array + O(m+n) for stack space
import java.util.Arrays;

class Solution {
    //memoization:
    //TIME COMPLEXITY: O(m*n)
    //SPACE COMPLEXITY: O(m*n) fro dp array + O(m+n) for stack space

    public int minPathSum(int[][] grid) {
        int m= grid.length;
        int n= grid[0].length;
        int[][] dp= new int[m][n];

        for(int i=0; i<m; i++){
            Arrays.fill(dp[i], -1);
        }
        return f(0,0, grid, m, n, dp);
    }
    public int f(int i, int j, int[][] grid, int m, int n, int[][] dp){
        if(i>m-1 || j> n-1) return Integer.MAX_VALUE;
        if(i==m-1 && j== n-1)   return grid[m-1][n-1];

        if(dp[i][j]!= -1)   return dp[i][j];

        int down= f(i+1, j, grid, m,n, dp);
        int right= f(i, j+1, grid, m, n, dp);

        return dp[i][j] = grid[i][j]+ Math.min(down,right);
        
    }
}

                                                                                            APPROACH 3: TABULATION
                                                                                            TIME COMPLEXITY: O(m*n)
                                                                                            SPACE COMPLEXITY:O(m*n) for dp array 
import java.util.Arrays;

class Solution {
    //tabulation:
    //TIME COMPLEXITY: O(m*n)
    //SPACE COMPLEXITY: O(m*n) for dp array 

    public int minPathSum(int[][] grid) {
        int m= grid.length;
        int n= grid[0].length;
        int[][] dp= new int[m][n];

        dp[0][0]= grid[0][0];

        for(int i=1; i<m; i++){
            dp[i][0]= grid[i][0] + dp[i-1][0];
        }
        for(int j=1; j<n; j++){
            dp[0][j]= grid[0][j]+ dp[0][j-1];
        }

        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                dp[i][j]= grid[i][j]+ Math.min(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[m-1][n-1];
    }
    // public int f(int i, int j, int[][] grid, int m, int n, int[][] dp){
    //     if(i>m-1 || j> n-1) return Integer.MAX_VALUE;
    //     if(i==m-1 && j== n-1)   return grid[m-1][n-1];

    //     if(dp[i][j]!= -1)   return dp[i][j];

    //     int down= f(i+1, j, grid, m,n, dp);
    //     int right= f(i, j+1, grid, m, n, dp);

    //     return dp[i][j] = grid[i][j]+ Math.min(down,right);
        
    // }
}


                                                                                            APPROACH 4: SPACE OPTIMISED
                                                                                            TIME COMPLEXITY: O(m*n)
                                                                                            SPACE COMPLEXITY:O(n) for dp array 
import java.util.Arrays;

class Solution {
    //space optimised:
    //TIME COMPLEXITY: O(m*n)
    //SPACE COMPLEXITY: O(n)

    public int minPathSum(int[][] grid) {
        int m= grid.length;
        int n= grid[0].length;
        int[] dp= new int[n];

        dp[0]= grid[0][0];

        for(int j=1; j<n; j++){
            dp[j]= dp[j-1]+ grid[0][j];
        }

        for(int i=1; i<m; i++){
            for(int j=0; j<n; j++){
                if(j==0)    dp[j]= dp[j]+ grid[i][j];
                else{
                    dp[j]= grid[i][j]+ Math.min(dp[j], dp[j-1]);
                }
            }
        }
        return dp[n-1];
    }
}

