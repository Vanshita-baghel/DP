PROBLEM STATEMENT:
Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.

SOLUTION:
                                                                    CONCEPT ---> DELELTION= word1.length - lcs(words=1, word2)
                                                                                INSERTION= word2.length - lcs(words=1, word2)
                                                                                  total operation = n+m - ( 2*lcs(words=1, word2) ) 

class Solution {
    public int minDistance(String word1, String word2) {
        int n= word1.length(), m= word2.length();
        return n+m - (2* longestCommonSubsequence(word1, word2));
    }

    public int longestCommonSubsequence(String s, String t) {
        int n= s.length();
        int m= t.length();

        int[] prev= new int[m+1];
        int[] cur= new int[m+1];
        
        for(int j=0; j<=m; j++){
            prev[j]= 0;
        }

        for(int i= 1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(s.charAt(i-1) == t.charAt(j-1))  cur[j]= 1+ prev[j-1];

                else cur[j]= Math.max(prev[j], cur[j-1]);
            }
            prev= cur.clone();
        }

        return prev[m];
    }
}
