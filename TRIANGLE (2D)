PROBLEM STATEMENT:
Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

SOLUTION:

                                                                                        APPROACH 1: RECURSION
                                                                                      TIME COMPLEXITY: O(2^(N^2))
                                                                                      SPACE COMPLEXITY: O(N) FOR RECURSION
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        return f(0,0, triangle);
    }
    public int f(int i, int j, List<List<Integer>> triangle){

        if(i== triangle.size()-1)    return triangle.get(i).get(j);

        int down= f(i+1, j, triangle);
        int downRight= f(i+1, j+1, triangle);

        return triangle.get(i).get(j) + Math.min(down, downRight);

    }
}

                                                                                        APPROACH 2: MEMOIZATION
                                                                                      TIME COMPLEXITY: O(N^2) , N= number of rows
                                                                                      SPACE COMPLEXITY: O(N) FOR STACK SPACE + O(N^2) FOR DP ARRAY
class Solution {
    //memoization approach:
    //time complexity: O(n^2),       n= number of rows
    //space complexity: O(n) for stack space+ O(n^2) for dp      
    public int minimumTotal(List<List<Integer>> triangle) {
        int n= triangle.size();
        List<List<Integer>> dp= new ArrayList<>();

        for(int i=0; i<n; i++){
            List<Integer> row= new ArrayList<>();
            for(int j=0; j<=i; j++){
                row.add(-1);
            }
            dp.add(row);
        }

        return f(0,0, triangle, dp);
    }
    public int f(int i, int j, List<List<Integer>> triangle, List<List<Integer>> dp){

        if(i== triangle.size()-1)    return triangle.get(i).get(j);

        if(dp.get(i).get(j)!=-1)    return dp.get(i).get(j);

        int down= f(i+1, j, triangle, dp);
        int downRight= f(i+1, j+1, triangle, dp);

        int result= triangle.get(i).get(j) + Math.min(down, downRight);
        dp.get(i).set(j, result);

        return result;
    }
}

                                                                                        APPROACH 3: TABULATION
                                                                                      TIME COMPLEXITY: O(N^2) , N= number of rows
                                                                                      SPACE COMPLEXITY: O(N^2) FOR DP ARRAY
class Solution {
    //taulation approach:
    //time complexity: O(n^2),       n= number of rows
    //space complexity:  O(n^2) for dp      
    public int minimumTotal(List<List<Integer>> triangle) {
        int n= triangle.size();
        List<List<Integer>> dp= new ArrayList<>();
        int minPath=Integer.MAX_VALUE;

        List<Integer> firstRow= new ArrayList<>();
        firstRow.add(triangle.get(0).get(0));
        dp.add(firstRow);

        for(int i=1; i<n; i++){
            List<Integer> row= new ArrayList<>();
            for(int j=0; j<=i; j++){
                if(j==0)    row.add(triangle.get(i).get(0) + dp.get(i-1).get(0));
                else{
                    int upper= (j==i)? Integer.MAX_VALUE: dp.get(i-1).get(j);
                    row.add(triangle.get(i).get(j) + Math.min(dp.get(i-1).get(j-1), upper));
                }

                if(i== n-1) minPath= Math.min(minPath, row.get(j));
            }
            dp.add(row);
        }

        return (n==1)? triangle.get(0).get(0) : minPath;
    }
    
}

                                                                                      APPROACH 4: SPACE OPTIMISED
                                                                                      TIME COMPLEXITY: O(N^2)   ,          N= number of rows
                                                                                      SPACE COMPLEXITY: O(N) FOR DP ARRAY

class Solution {     
    public int minimumTotal(List<List<Integer>> triangle) {
        int n= triangle.size();
        int[] dp= new int[n];

        for(int i=0;i <n; i++){
            dp[i]= triangle.get(n-1).get(i);
        }

        for(int i= n-2; i>=0; i--){
            for(int j=0; j<=i; j++){
                dp[j]= triangle.get(i).get(j)+ Math.min(dp[j], dp[j+1]);
            }
        }
        return dp[0];
    }
}
