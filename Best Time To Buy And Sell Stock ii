PROBLEM STATEMENT:
You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

SOLUTION:

                                                                                            APPROACH 1: RECURSION
                                                                                            TIME COMPLEXITY:  O(2^n)
                                                                                            SPACE COMPLEXITY: O(n)
class Solution {
    //recursion
    //tc= O(2^n)
    //sc= O(n)
    public int maxProfit(int[] prices) {
        return f(0, 1, prices);
    }

    public int f(int ind, int buy, int[] prices){
        if(ind== prices.length) return 0;
        int profit=0;

        if(buy==1){
            profit= Math.max(-prices[ind]+f(ind+1,0, prices), f(ind+1, 1, prices));
        }
        else{
            profit= Math.max(prices[ind]+ f(ind+1, 1, prices), f(ind+1, 0, prices));
        }
        return profit;
    }
}

                                                                                            APPROACH 2: MEMOIZATION
                                                                                            TIME COMPLEXITY: O(n*2) 
                                                                                            SPACE COMPLEXITY: O( n * 2) + O(n)
class Solution {
    //memoization
    //tc= O(n*2)
    //sc= O( n * 2) + O(n)
    public int maxProfit(int[] prices) {
        int n= prices.length;

        int[][] dp= new int[n][2];
        for(int i=0; i<n; i++){
            Arrays.fill(dp[i], -1);
        }

        return f(0, 1, prices, dp);
    }

    public int f(int ind, int buy, int[] prices, int[][] dp){
        if(ind== prices.length) return 0;
        int profit=0;

        if(dp[ind][buy] != -1)  return dp[ind][buy];

        if(buy==1){
            profit= Math.max(-prices[ind]+f(ind+1,0, prices, dp), f(ind+1, 1, prices, dp));
        }
        else{
            profit= Math.max(prices[ind]+ f(ind+1, 1, prices, dp), f(ind+1, 0, prices, dp));
        }
        return dp[ind][buy]= profit;
    }
}

                                                                                            APPROACH 3: TABULATION
                                                                                            TIME COMPLEXITY:  O(n*2)
                                                                                            SPACE COMPLEXITY:  O(n*2)

class Solution {
    //tabulation
    //tc= O(n*2)
    //sc= O(n*2)
    public int maxProfit(int[] prices) {
        int n= prices.length;

        int[][] dp= new int[n+1][2];
        
        for(int ind =n-1; ind >=0; ind--){
            for(int buy=0; buy<2; buy++){
                int profit=0;
                if(buy==1){
                    profit= Math.max( -prices[ind]+dp[ind+1][0] , dp[ind+1][1] );
                }
                else{
                    profit= Math.max( prices[ind]+ dp[ind+1][1] , dp[ind+1][0] );
                }
                dp[ind][buy]= profit;
            }
        }

        return dp[0][1];
    }

}

                                                                                            APPROACH 4: SPACE OPTIMISATION
                                                                                            TIME COMPLEXITY:   O(n*2)
                                                                                            SPACE COMPLEXITY: O(1)
class Solution {
    //space optimisation
    //tc= O(n*2)
    //sc= O(1)
    public int maxProfit(int[] prices) {
        int n= prices.length;

        int[] ahead= new int[2];
        int[] cur= new int[2];
        
        for(int ind =n-1; ind >=0; ind--){
            for(int buy=0; buy<2; buy++){
                int profit=0;
                if(buy==1){
                    profit= Math.max( -prices[ind]+ahead[0] , ahead[1] );
                }
                else{
                    profit= Math.max( prices[ind]+ ahead[1] , ahead[0] );
                }
                cur[buy]= profit;
            }
            int[] temp= ahead;
            ahead= cur;
            cur= temp;
        }

        return ahead[1];
    }

}

