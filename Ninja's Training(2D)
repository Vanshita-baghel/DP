Problem statement
Ninja is planing this ‘N’ days-long training schedule. Each day, he can perform any one of these three activities. (Running, Fighting Practice or Learning New Moves). Each activity has some merit points on each day. As Ninja has to improve all his skills, he can’t do the same activity in two consecutive days. Can you help Ninja find out the maximum merit points Ninja can earn?

You are given a 2D array of size N*3 ‘POINTS’ with the points corresponding to each day and activity. Your task is to calculate the maximum number of merit points that Ninja can earn.

For Example
If the given ‘POINTS’ array is [[1,2,5], [3 ,1 ,1] ,[3,3,3] ],the answer will be 11 as 5 + 3 + 3.

SOLUTION:

                                                                                APPROACH 1: RECURSION
                                                                                TIME COMPLEXITY= O(3^n)
                                                                                SPACE COMPLEXITY= O(N)
public class Solution {
    
    public static int ninjaTraining(int n, int m[][]) {
        return f(n-1,3, m);
    }

    public static int f(int ind, int last, int[][] m){
        //base case
        if(ind==0){
            int maxi=0;
            for(int i=0; i<3; i++){
                if(i!=last) maxi= Math.max(maxi, m[0][i]);
            }
            return maxi;
        }

        int maxi=0;
        for(int i=0; i<3; i++){
            if(i!=last){
                maxi= Math.max(maxi, m[ind][i]+f(ind-1, i, m));
            }
        }
        return maxi;
    }
}

                                                                                      APPROACH 2: MEMOIZATION
                                                                                      TIME COMPLEXITY=  O(n)
                                                                                      SPACE COMPLEXITY=  O(n) for dp + O(n) for recursion stack = O(n)

import java.util.Arrays;

public class Solution {
    
    public static int ninjaTraining(int n, int m[][]) {
        int[][] dp= new int[n][4];
        for(int i=0; i<dp.length; i++){
            Arrays.fill(dp[i], -1);
        }
        
        return f(n-1,3, m, dp);
    }

    public static int f(int ind, int last, int[][] m, int[][] dp){
        //base case
        if(ind==0){
            int maxi=0;
            for(int i=0; i<3; i++){
                if(i!=last) maxi= Math.max(maxi, m[0][i]);
            }
            return maxi;
        }
        if(dp[ind][last] != -1) return dp[ind][last];
        int maxi=0;
        for(int i=0; i<3; i++){
            if(i!=last){
                maxi= Math.max(maxi, m[ind][i]+f(ind-1, i, m, dp));
            }
        }
        return dp[ind][last]= maxi;
    }
    

}


                                                                                  APPROACH 3: TABULATION
                                                                                  TIME COMPLEXITY: O(n * 4 * 3) = O(n)
                                                                                  SPACE COMPLEXITY: O(n)

public class Solution {
    
    public static int ninjaTraining(int n, int m[][]) {
        int[][] dp= new int[n][4];
        dp[0][0]= Math.max(m[0][1], m[0][2]);
        dp[0][1]= Math.max(m[0][0], m[0][2]);
        dp[0][2]= Math.max(m[0][1], m[0][0]);
        dp[0][3]= Math.max(m[0][0], Math.max(m[0][2], m[0][1]) );
        for(int i=1; i<n; i++){
            for(int last=0 ; last<4; last++){
                dp[i][last]=0;
                int maxi=0;
                for(int task=0; task<3; task++){
                    if(task!= last){
                        int points= m[i][task] + dp[i-1][task];
                        maxi= Math.max(maxi, points);
                    }
                }
                dp[i][last]= maxi;
            }
        }
        return dp[n-1][3];
    } 

}

                                                                            APPROACH 4: SPACE OPTIMIZATION
                                                                            TIME COMPLEXITY: O(n * 4*3)  = O(N)
                                                                            SPACE COMPLEXITY: O(4) = O(1)
import java.util.Arrays;

public class Solution {
    
    public static int ninjaTraining(int n, int m[][]) {
        int[] prev= new int[4];
        prev[0]= Math.max(m[0][1], m[0][2]);
        prev[1]= Math.max(m[0][0], m[0][2]);
        prev[2]= Math.max(m[0][1], m[0][0]);
        prev[3]= Math.max(m[0][0], Math.max(m[0][2], m[0][1]) );
        for(int i=1; i<n; i++){
            int[] temp= new int[4];
            for(int last=0 ; last<4; last++){
                temp[last]=0;
                for(int task=0; task<3; task++){
                    if(task!= last){
                        temp[last]= Math.max(temp[last], m[i][task]+prev[task]);
                    }

                }
                
            }
            prev= temp;
        }
        return prev[3];
    } 

}
