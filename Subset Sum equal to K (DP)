Problem statement
You are given an array/list ‘ARR’ of ‘N’ positive integers and an integer ‘K’. Your task is to check if there exists a subset in ‘ARR’ with a sum equal to ‘K’.

Note: Return true if there exists a subset with sum equal to ‘K’. Otherwise, return false.

For Example :
If ‘ARR’ is {1,2,3,4} and ‘K’ = 4, then there exists 2 subsets with sum = 4. These are {1,3} and {4}. Hence, return true.

SOLUTION:

                                                                                  APPROACH 1:  RECURSION
                                                                                TIME COMPLEXITY: O(2^N)
                                                                                SPACE COMPLEXITY: O(N) for stack space
import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        return f(n-1, k, arr);
    }
    public static boolean f(int ind, int target, int[] arr){
        if(target==0) return true;
        if(ind ==0) return arr[ind]== target;
        

        boolean notTake= f(ind-1, target, arr);
        boolean take= false;
        if(arr[ind]<=target){
            take= f(ind-1, target-arr[ind], arr);
        }

        return notTake || take;
    }
}
                                                                                  APPROACH 2:  MEMOIZATION
                                                                                TIME COMPLEXITY: O(N*target)
                                                                                SPACE COMPLEXITY: O(N*target) + O(N) for stack space
import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        Boolean[][] dp= new Boolean[n][k+1];

        for(int i=0; i<dp.length; i++){
            Arrays.fill(dp[i], null);
        }

        return f(n-1, k, arr, dp);
    }
    public static boolean f(int ind, int target, int[] arr, Boolean[][] dp){
        if(target==0) return true;
        if(ind ==0) return arr[ind]== target;
        
        if(dp[ind][target]!= null)    return dp[ind][target];

        boolean notTake= f(ind-1, target, arr, dp);
        boolean take= false;
        if(arr[ind]<=target){
            take= f(ind-1, target-arr[ind], arr, dp);
        }

        return dp[ind][target] = (notTake|| take);
    }
}
                                                                                  APPROACH 3:  TABULATION
                                                                                TIME COMPLEXITY: O(N*target)
                                                                                SPACE COMPLEXITY: O(N*target)
import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        boolean[][] dp= new boolean[n][k+1];

        for(int i=0; i<n; i++){
            dp[i][0]= true;
        }
        if(arr[0]<=k)    dp[0][arr[0]]= true;

        for(int ind=1; ind<n; ind++){
            for(int target=1; target<=k; target++){
                boolean notTake= dp[ind-1][target];
                boolean take= false;
                if(arr[ind]<=target){
                    take= dp[ind-1][target-arr[ind]];
                }

                dp[ind][target] = (notTake|| take);
            }
        }
        return dp[n-1][k];
    }
    
}
                                                                                 APPROACH 4:  SPACE OPTIMISATION
                                                                                TIME COMPLEXITY: O(N*target)
                                                                                SPACE COMPLEXITY: O(K)
import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        boolean[] prev= new boolean[k+1];
        boolean[] cur= new boolean[k+1];

        cur[0]= true;
        prev[0]= true;
        

        if(arr[0]<=k)    prev[arr[0]]= true;

        for(int ind=1; ind<n; ind++){
            for(int target=1; target<=k; target++){
                boolean notTake= prev[target];
                boolean take= false;
                if(arr[ind]<=target){
                    take= prev[target-arr[ind]];
                }

                cur[target] = (notTake|| take);
            }
            prev= cur.clone();
        }
        return prev[k];
    }
    
}


