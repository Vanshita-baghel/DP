PROBLEM STATEMENT:
You are given two strings ‘s1’ and ‘s2’.



Return the longest common subsequence of these strings.



If there’s no such string, return an empty string. If there are multiple possible answers, return any such string.



Note:
Longest common subsequence of string ‘s1’ and ‘s2’ is the longest subsequence of ‘s1’ that is also a subsequence of ‘s2’. A ‘subsequence’ of ‘s1’ is a string that can be formed by deleting one or more (possibly zero) characters from ‘s1’.

SOLUTION:

public class Solution {
    public static String findLCS(int n, int m, String s, String t){

        int[][] dp= new int[n+1][m+1];
        
        for(int i=0; i<=n; i++){
            dp[i][0]= 0;
        }
        for(int j=0; j<=m; j++){
            dp[0][j]= 0;
        }

        for(int i= 1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(s.charAt(i-1) == t.charAt(j-1))  dp[i][j]= 1+ dp[i-1][j-1];

                else dp[i][j]= Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }

        StringBuilder sb= new StringBuilder("");
        int i=n,j=m;
        while(i>0 && j>0){
            if(s.charAt(i-1)== t.charAt(j-1)){
                sb.insert(0, s.charAt(i-1));
                i--;
                j--;
            }
            else if(dp[i-1][j] > dp[i][j-1]){
                i--;
            }
            else    j--;
        }
        return sb.toString();
    }
    
}
