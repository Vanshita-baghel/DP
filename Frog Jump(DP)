Problem statement
There is a frog on the '1st' step of an 'N' stairs long staircase. The frog wants to reach the 'Nth' stair. 'HEIGHT[i]' is the height of the '(i+1)th' stair.If Frog jumps from 'ith' to 'jth' stair, the energy lost in the jump is given by absolute value of ( HEIGHT[i-1] - HEIGHT[j-1] ). If the Frog is on 'ith' staircase, he can jump either to '(i+1)th' stair or to '(i+2)th' stair. Your task is to find the minimum total energy used by the frog to reach from '1st' stair to 'Nth' stair.

For Example
If the given ‘HEIGHT’ array is [10,20,30,10], the answer 20 as the frog can jump from 1st stair to 2nd stair (|20-10| = 10 energy lost) and then a jump from 2nd stair to last stair (|10-20| = 10 energy lost). So, the total energy lost is 20.


SOLUTION:

                                                                     APPROACH 1: USING RECURSION  
                                                                          TIME COMPLEXITY= O(2^N)
                                                                          SPACE COMPLEXITY= O(N) --> recursion Stack space
class Solution{
   public static int frogJump(int n, int[] height) {
        if (n == 0) return 0;

        // Jump from previous stair
        int jumpOne = frogJump(n - 1, height) + Math.abs(height[n] - height[n - 1]);

        // Jump from two stairs back (only if possible)
        int jumpTwo = Integer.MAX_VALUE;
        if (n > 1) {
            jumpTwo = frogJump(n - 2, height) + Math.abs(height[n] - height[n - 2]);
        }

        return Math.min(jumpOne, jumpTwo);
    }
}

                                                                          APPROACH 2: MEMOIZATION
                                                                            TIME COMPLEXITY: O(N)
                                                                            SPACE COMPLEXITY: O(N)+O(N)
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int frogJump(int n, int heights[]) {
        int[] dp= new int[n];
        Arrays.fill(dp, -1);
        return solve(n-1, heights, dp);
        
    }
    public static int solve(int i, int[] ht, int[] dp){
        if(i==0)    return 0;
        if(dp[i]!= -1)  return dp[i];

        int oneJump= solve(i-1, ht, dp) + Math.abs(ht[i]- ht[i-1]);
        int twoJump= Integer.MAX_VALUE;
        if(i>1){
            twoJump= solve(i-2, ht, dp) + Math.abs(ht[i]- ht[i-2]);
        }

        return dp[i]= Math.min(oneJump, twoJump);
    }
}

                                                                          APPROACH 3: TABULATION  (bottom up approach)  (removing stack space)
                                                                            TIME COMPLEXITY: O(N)
                                                                            SPACE COMPLEXITY: O(N)    

import java.util.* ;
import java.io.*; 
public class Solution {
    public static int frogJump(int n, int heights[]) {
        int[] dp= new int[n];
        for(int i=1; i<heights.length; i++){
            int left= dp[i-1]+ Math.abs(heights[i]- heights[i-1]);
            int right= Integer.MAX_VALUE;
            if(i>1) right= dp[i-2] + Math.abs(heights[i]- heights[i-2]);
            dp[i]= Math.min(left, right);
        }
        return dp[n-1];
    }
   
}
                                                                          APPROACH 4: SPACE OPTIMIZATION  
                                                                            TIME COMPLEXITY: O(N)
                                                                            SPACE COMPLEXITY: O(1)    
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int frogJump(int n, int heights[]) {
        int prev=0, prev2=0, curi=0;
        for(int i=1; i<heights.length; i++){
            int left= prev+ Math.abs(heights[i]- heights[i-1]);
            int right= Integer.MAX_VALUE;
            if(i>1) right= prev2 + Math.abs(heights[i]- heights[i-2]);
            curi = Math.min(left, right);
            prev2= prev;
            prev= curi;
        }
        return prev;
    }
   
}
