PROBLEM STATEMENT:
There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

SOLUTION:

                                                                                      APPROACH 1:  RECURSION
                                                                                  TIME COMPLEXITY: O(2^(m+n))
                                                                                  SPACE COMPLEXITY: O(m+n)

class Solution {
    public int uniquePaths(int m, int n) {
        return f(0,0,m,n);
    }
    public int f(int i, int j, int m, int n){
        if(i>m-1 || j> n-1) return 0;
        if(i==m-1 && j==n-1)    return 1;
        return f(i+1, j, m,n, dp) + f(i, j+1, m, n, dp);
    }
}

                                                                                      APPROACH 2:  MEMOIZATION
                                                                                  TIME COMPLEXITY: O(M*N)
                                                                                  SPACE COMPLEXITY: O(M*N) + STACK SPACE
import java.util.Arrays;
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp= new int[m][n];
        for(int i=0; i<m; i++){
            Arrays.fill(dp[i], -1);
        }
        return f(0,0,m,n, dp);

    }
    public int f(int i, int j, int m, int n, int[][] dp){
        if(i>m-1 || j> n-1) return 0;
        if(i==m-1 && j==n-1)    return 1;
        if(dp[i][j]!= -1)   return dp[i][j];
        return dp[i][j]= f(i+1, j, m,n, dp) + f(i, j+1, m, n, dp);
    }
}

                                                                                      APPROACH 3:  TABULATION
                                                                                  TIME COMPLEXITY: O(M*N)
                                                                                  SPACE COMPLEXITY: O(M*N) 
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) dp[i][0] = 1;
        for (int j = 0; j < n; j++) dp[0][j] = 1;
        
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        
        return dp[m - 1][n - 1];
    }
}


                                                                                      APPROACH 3:  SPACE OPTIMIZATION
                                                                                  TIME COMPLEXITY: O(M*N)
                                                                                  SPACE COMPLEXITY: O(N)
import java.util.Arrays;
class Solution {
    public int uniquePaths(int m, int n) {
        int[] dp= new int[n];
        for(int i=0; i<n; i++)  dp[i]= 1;

        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                dp[j]= dp[j] + dp[j-1];
            }
        }
        return dp[n-1];
    }
}
