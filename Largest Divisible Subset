PROBLEM STATEMENT:
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

SOLUTION:
                                                                                  TIME COMPLEXITY: O(n*logn)
                                                                                  SPACE COMPLEXITY: O(n)

class Solution {
    //nlogn
    public List<Integer> largestDivisibleSubset(int[] nums) {
        Arrays.sort(nums);
        int n= nums.length;
        int[] dp= new int[n];
        int[] hash= new int[n];
        int lisInd=0, lisLen=0;
        List<Integer> res= new ArrayList<>();

        for(int i=0; i<n; i++){
            dp[i]=1;
            hash[i]= i;
            for(int prev=0; prev<i; prev++){
                if(nums[i] % nums[prev] == 0 && dp[i]< 1+dp[prev]) {
                    dp[i]= 1+dp[prev];
                    hash[i]= prev;
                }
            }
        }
        for(int i=0; i<n; i++){
            if(dp[i]>lisLen){
                lisLen= dp[i];
                lisInd= i;
            }
        }
        
        while(hash[lisInd] != lisInd){
            res.add(nums[lisInd]);
            lisInd= hash[lisInd];
        }
        
        res.add(nums[lisInd]);
        
        Collections.reverse(res);
        
        return res;
    }
}
