PROBLEM STATEMENT:
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character

SOLUTION:

                                                                                              APPROACH 1: RECURSION
                                                                                              TIME COMPLEXITY: exponential
                                                                                              SPACE COMPLEXITY: O(n+m)
class Solution {
    //recursion
    //tc= exponential
    //sc = O(n+m)
    public int minDistance(String s, String t) {
        int n= s.length();
        int m= t.length();

        return f(n-1, m-1, s, t);
    }
    public int f(int i, int j, String s, String t){
        if(j<0) return i+1;
        if(i<0) return j+1;

        if(s.charAt(i)== t.charAt(j))   return f(i-1, j-1, s, t);
        return 1+ Math.min(f(i-1, j,s,t), Math.min(f(i,j-1,s,t), f(i-1,j-1,s,t)));
    }
}
                                                                                              APPROACH 2: MEMOIZTION
                                                                                              TIME COMPLEXITY: O(n*m)
                                                                                              SPACE COMPLEXITY: O(n*m) + O(n+m)
class Solution {
    //memoization
    //tc= O(n*m)
    //sc = O(n*m) +  O(n+m)
    public int minDistance(String s, String t) {
        int n= s.length();
        int m= t.length();

        int[][] dp= new int[n][m];
        for(int i=0; i<n; i++){
            Arrays.fill(dp[i], -1);
        }

        return f(n-1, m-1, s, t, dp);
    }
    public int f(int i, int j, String s, String t, int[][] dp){
        if(j<0) return i+1;
        if(i<0) return j+1;

        if(dp[i][j]!= -1)   return dp[i][j];

        if(s.charAt(i)== t.charAt(j))  return dp[i][j]= f(i-1, j-1, s, t, dp);
        return dp[i][j] = 1+ Math.min(f(i-1, j,s,t, dp), 
                                    Math.min(f(i,j-1,s,t, dp), f(i-1,j-1,s,t, dp)));
    }
}

                                                                                              APPROACH 3: TABULATION
                                                                                              TIME COMPLEXITY: O(n*m)
                                                                                              SPACE COMPLEXITY: O(n*m)
class Solution {
    //tabulation
    //tc= O(n*m)
    //sc = O(n*m) 
    public int minDistance(String s, String t) {
        int n= s.length();
        int m= t.length();

        int[][] dp= new int[n+1][m+1];
        
        for(int i=0; i<=n; i++){
            dp[i][0]= i;
        }

        for(int j=1; j<=m; j++){
            dp[0][j]= j;
        }

        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(s.charAt(i-1)== t.charAt(j-1))  dp[i][j]= dp[i-1][j-1] ;
                else    dp[i][j] = 1+ Math.min(dp[i-1][j] , 
                                    Math.min(dp[i][j-1] , dp[i-1][j-1]));
            }
        }
        return dp[n][m];
    }
    
}

                                                                                              APPROACH 4: SPACE OPTIMISATION
                                                                                              TIME COMPLEXITY: O(n*m)
                                                                                              SPACE COMPLEXITY: O(n)
class Solution {
    //space optimisation
    //tc= O(n*m)
    //sc = O(n*m) 
    public int minDistance(String s, String t) {
        int n= s.length();
        int m= t.length();

        int[] prev= new int[m+1];
        int[] cur= new int[m+1];
        
        

        for(int j=1; j<=m; j++){
            prev[j]= j;
        }

        for(int i=1; i<=n; i++){
            cur[0]=i;
            for(int j=1; j<=m; j++){
                if(s.charAt(i-1)== t.charAt(j-1))  cur[j]= prev[j-1] ;
                else    cur[j] = 1+ Math.min(prev[j] , 
                                    Math.min(cur[j-1] , prev[j-1]));
            }
            prev= cur.clone();
        }
        return prev[m];
    }
    
}
