PROBLEM STATEMENT:
You are given two strings s1 and s2. Your task is to find the length of the longest common substring among the given strings.

SOLUTION:

                                                                                              APPROACH 1: TABULATION
                                                                                              TIME COMPLEXITY: O(n*m)
                                                                                              SPACE COMPLEXITY: O(n*m)

class Solution {
    public int longestCommonSubstr(String s1, String s2) {
        int n= s1.length();
        int m= s2.length();
        int maxi=0;
        
        int[][] dp= new int[n+1][m+1];
        
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                
                if(s1.charAt(i-1) == s2.charAt(j-1)){
                    dp[i][j]= 1+dp[i-1][j-1];
                    maxi= Math.max(maxi, dp[i][j]);
                }    
                else{
                    dp[i][j]= 0;
                }
            }
        }
        return maxi;   
    }
}
                                                                                              APPROACH 2: SPACE OPTIMISATION
                                                                                              TIME COMPLEXITY: O(n*m)
                                                                                              SPACE COMPLEXITY: o(m)

// User function Template for Java

class Solution {
    public int longestCommonSubstr(String s1, String s2) {
        int n= s1.length();
        int m= s2.length();
        int maxi=0;
        
        int[] prev= new int[m+1];
        int[] cur= new int[m+1];
        
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                
                if(s1.charAt(i-1) == s2.charAt(j-1)){
                    cur[j]= 1+prev[j-1];
                    maxi= Math.max(maxi, cur[j]);
                }    
                else{
                    cur[j]= 0;
                }
                
            }
            prev= cur.clone();
        }
        
        return maxi;
        
    }
}
