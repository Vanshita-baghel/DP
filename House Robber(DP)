PROBLEM STATEMENT:
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

SOLUTION:

                                                                                          APPROACH 1: RECURSION
class Solution {
    int maxi= Integer.MIN_VALUE;
    public int rob(int[] nums) {
        List<Integer> money= new ArrayList<>();
        solve(money, nums, 0,0);
        return maxi;
    }
    public void solve(List<Integer> money, int[] nums, int i, int sum){
        if(i>=nums.length){
            maxi= Math.max(maxi, sum);
            return;
        }
        money.add(nums[i]);
        sum+= nums[i];
        solve(money, nums, i+2, sum);
        money.remove(money.size()-1);
        sum-= nums[i];
        solve(money, nums, i+1, sum);
    }
}
                                                                                  APPROACH 2: MEMOIZATION
class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        return solve(n - 1, nums, dp);
    }

    private int solve(int i, int[] nums, int[] dp) {
        if (i < 0) return 0;
        if (i == 0) return nums[0];
        if (dp[i] != -1) return dp[i];

        int pick = nums[i] + solve(i - 2, nums, dp);
        int notPick = solve(i - 1, nums, dp);

        return dp[i] = Math.max(pick, notPick);
    }
}

                                                                              APPROACH 3: TABULATION
class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];

        int[] dp = new int[n];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);

        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(nums[i] + dp[i - 2], dp[i - 1]);
        }

        return dp[n - 1];
    }
}
                                                                            APPROACH 4: SPACE OPTIMISATION
class Solution {
    public int rob(int[] nums) {
        int prev= nums[0], prev2= 0;
        for(int i=1; i<nums.length; i++){
            int pick= nums[i];
            if(i>1) pick+= prev2;
            int notPick= prev;
            int curi= Math.max(pick, notPick);
            prev2= prev;
            prev= curi;
        }
        return prev;
    }
    
}
