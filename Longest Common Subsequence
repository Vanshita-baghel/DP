PROBLEM STATEMENT:
Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

SOLUTION:
                                                                                      APPROACH 1: RECURSION
                                                                                      TIME COMPLEXITY: O(2^(n + m))
                                                                                      SPACE COMPLEXITY: O(n+m)
import java.util.Arrays;
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n= text1.length();
        int m= text2.length();

        return f(n-1, m-1, text1, text2);
    }
    public int f(int ind1, int ind2, String s, String t){
        if(ind1<0 || ind2<0)    return 0;

        if(s.charAt(ind1) == t.charAt(ind2)) return dp[ind1][ind2]= 1+ f(ind1-1, ind2-1, s, t);

        return Math.max(f(ind1-1, ind2, s, t, dp), f(ind1, ind2-1, s, t));
    }
}
                                                                                      APPROACH 2: MEMOIZATION
                                                                                      TIME COMPLEXITY:  O(n*m)
                                                                                      SPACE COMPLEXITY: O(n+m) +  O(n*m)
import java.util.Arrays;
class Solution {
    //memoization
    //tc= O(n*m)
    //sc= O(n+m) +  O(n*m)
    public int longestCommonSubsequence(String text1, String text2) {
        int n= text1.length();
        int m= text2.length();

        int[][] dp= new int[n][m];
        for(int i=0; i<n; i++){
            Arrays.fill(dp[i], -1);
        }

        return f(n-1, m-1, text1, text2, dp);
    }
    public int f(int ind1, int ind2, String s, String t, int[][] dp){
        if(ind1<0 || ind2<0)    return 0;

        if(dp[ind1][ind2] != -1)    return dp[ind1][ind2];

        if(s.charAt(ind1) == t.charAt(ind2)) return dp[ind1][ind2]= 1+ f(ind1-1, ind2-1, s, t, dp);

        return dp[ind1][ind2]= Math.max(f(ind1-1, ind2, s, t, dp), f(ind1, ind2-1, s, t, dp));
    }
}
                                                                                      APPROACH 3: TABULATION
                                                                                      TIME COMPLEXITY: O(n*m)
                                                                                      SPACE COMPLEXITY: O(n*m)
import java.util.Arrays;
class Solution {
    //tabulation : n== n-1, m== m-1, i=1 --> i=0
    //tc= O(n*m)
    //sc= O(n*m)
    public int longestCommonSubsequence(String s, String t) {
        int n= s.length();
        int m= t.length();

        int[][] dp= new int[n+1][m+1];
        
        for(int i=0; i<=n; i++){
            dp[i][0]= 0;
        }
        for(int j=0; j<=m; j++){
            dp[0][j]= 0;
        }

        for(int i= 1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(s.charAt(i-1) == t.charAt(j-1))  dp[i][j]= 1+ dp[i-1][j-1];

                else dp[i][j]= Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }

        return dp[n][m];
    }
    public int f(int ind1, int ind2, String s, String t, int[][] dp){
        if(ind1<0 || ind2<0)    return 0;

        if(dp[ind1][ind2] != -1)    return dp[ind1][ind2];

        if(s.charAt(ind1) == t.charAt(ind2)) return dp[ind1][ind2]= 1+ f(ind1-1, ind2-1, s, t, dp);

        return dp[ind1][ind2]= Math.max(f(ind1-1, ind2, s, t, dp), f(ind1, ind2-1, s, t, dp));
    }
}
                                                                                      APPROACH 4: SPACE OPTIMISATION
                                                                                      TIME COMPLEXITY: O(n*m)
                                                                                      SPACE COMPLEXITY: O(m)
import java.util.Arrays;
class Solution {
    //space optimisation
    //tc= O(n*m)
    //sc= O(m)
    public int longestCommonSubsequence(String s, String t) {
        int n= s.length();
        int m= t.length();

        int[] prev= new int[m+1];
        int[] cur= new int[m+1];
        
        for(int j=0; j<=m; j++){
            prev[j]= 0;
        }

        for(int i= 1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(s.charAt(i-1) == t.charAt(j-1))  cur[j]= 1+ prev[j-1];

                else cur[j]= Math.max(prev[j], cur[j-1]);
            }
            prev= cur.clone();
        }

        return prev[m];
    }
    public int f(int ind1, int ind2, String s, String t, int[][] dp){
        if(ind1<0 || ind2<0)    return 0;

        if(dp[ind1][ind2] != -1)    return dp[ind1][ind2];

        if(s.charAt(ind1) == t.charAt(ind2)) return dp[ind1][ind2]= 1+ f(ind1-1, ind2-1, s, t, dp);

        return dp[ind1][ind2]= Math.max(f(ind1-1, ind2, s, t, dp), f(ind1, ind2-1, s, t, dp));
    }
}
